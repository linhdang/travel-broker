package mams;

// each provider will be registered via TravelBroker
agent AccommodationProviderAgent extends mams.PassiveMAMSAgent, astra.protocol.FipaRequest, astra.protocol.FipaSubscribe, mams.TravelAgent {

    module System system;
    module Console console;
    module Functions F;

    initial !init();
    initial !monitor_action_requests();
    
    types eg {
        formula available_accommodation(string, string, long, long, long);
    }

    rule +!init() {
        MAMSAgent::!init();
        MAMSAgent::!created("base");
        system.trace(true);
        console.println("Setting up available plans under the providers");
        // create endpoint for registering plans http://localhos:9000/travel-broker/plans
        PassiveMAMSAgent::!listResource("plans", "mams.AccommodationPlan");

        // subscribe for any new plans submitted

        // subscribe to a infrastructure agent given the name
        // S.getOwner return the agent orginating the current agent
        FipaSubscribe::!!subscribe(S.getOwner(), "plan_request");

    }

    // add the available service, and trigger negotiation
    rule $cartago.signal(string source_artifact_name, listItemArtifactCreated(string provider_name,  "mams.AccommodationPlan")) {
        // handle Provider registration
        string name = source_artifact_name+"-"+provider_name;
        cartago.lookupArtifact(name, cartago.ArtifactId id);
        cartago.focus(id);

        // Record info about the artifact
        +artifact(provider_name, name, id);
        !itemProperty(provider_name, "arrival", funct arrival);
        !itemProperty(provider_name, "accommodationType", funct accommodationType );
        !itemProperty(provider_name, "from", funct from);
        !itemProperty(provider_name, "to", funct to);
        !itemProperty(provider_name, "price", funct price);
        // record belief on available plan
        +available_accommodation(F.valueAsString(arrival, 0), F.valueAsString(accommodationType, 0), F.valueAsLong(from, 0), F.valueAsLong(to, 0),F.valueAsLong(price, 0));
       
    }

    rule +!handle_content("plan_request", plan_request_action(string customerName, string arrival, string departure, long from, long to, string accomodationType, string plannerId )) {
          
        // send proposed plan to based on what they have

        foreach(available_accommodation(string available_location, string available_accomodationType, long available_from, long available_to, long price)) {
            if (available_location == arrival & available_accomodationType == accomodationType & available_from == from) {
                !request_action(plannerId, accommodation(customerName, available_location, available_accomodationType, available_from, available_to, price));
            }
        }

    }
}