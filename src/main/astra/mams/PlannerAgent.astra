package mams;

// each Planner will be registered via TravelBroker
// Planner presents a Travel Agency registering with the market place
agent PlannerAgent extends mams.PassiveMAMSAgent, astra.protocol.FipaRequest, astra.protocol.FipaSubscribe, mams.TravelAgent{
    module System system;
    module Console console;

    
    initial !init();

     // initialize channel to send message to, would be a topic per se
    initial !monitor_action_requests(), !monitor_subscriptions();

    rule +!init() {
        MAMSAgent::!init();
        MAMSAgent::!created("base");
        system.trace(true);
        console.println("Setting up plans list resource under each planner");

        // create endpoint for registering plans http://localhos:9000/travel-broker/plan
        
        FipaSubscribe::!!subscribe(S.getOwner(), "plan_request");
    }

   // add the request plan, look for provider
    rule $cartago.signal(string source_artifact_name, listItemArtifactCreated(string planner_name, "mams.Plan")) {
        // handle Provider registration
        string name = source_artifact_name+"-"+planner_name;
        cartago.lookupArtifact(name, cartago.ArtifactId id);
        cartago.focus(id);

        // Record info about the artifact
        
        +artifact(planner_name, name, id);

        // copy the vaule from property of the submitted mams.Plan to a variable

        // !itemProperty(planner_name, "arrival", funct arrival);
        cartago.operation(planner_name, getStringProperty("arrival", string arrival));
        cartago.operation(planner_name, getStringProperty("departure", string departure));
       
        // !itemProperty(planner_name, "departure", funct departure);
        // !itemProperty(planner_name, "from", funct from);
        // !itemProperty(planner_name, "to", funct to);
        // !itemProperty(planner_name, "accomodationType", funct accomodationType);

        system.sleep(20000); // really 2s???;

    }

    rule +!handle_content("plan_request", plan_request_action(string departure, string arrival, string accomodationType, long from, long to, string plannerId )) {
        console.println("new plan request: " + departure + " held by: " + arrival);
    }

}