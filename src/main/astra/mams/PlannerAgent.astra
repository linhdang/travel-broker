package mams;

// each Planner will be registered via TravelBroker
// Planner presents a Travel Agency registering with the market place
agent PlannerAgent extends mams.PassiveMAMSAgent, astra.protocol.FipaRequest, mams.TravelAgent{
    module System system;
    module Console console;
    module Functions F;
    
    initial !init();

     // initialize channel to send message to, would be a topic per se
    initial !monitor_action_requests();

    types plan {
        //accommodation( sender, customerName, location, accomodationType, from, to, price )

        formula accommodation( string, string, string, string, long, long, long );

        //sender, customerName, departure, arrival, date, price

        formula flight(string, string, string, string, long, long);
        
    }

    rule +!init() {
        MAMSAgent::!init();
        MAMSAgent::!created("base");
        console.println("Setting up plans list resource under each planner");
        
        // create endpoint for requesting plan

        PassiveMAMSAgent::!listResource("plans", "mams.CustomerPlan");
    }

   // add the request plan, look for provider
    rule $cartago.signal(string source_artifact_name, listItemArtifactCreated(string customerId, "mams.CustomerPlan")) {
        // handle Provider registration
        string name = source_artifact_name+"-"+customerId;
        cartago.lookupArtifact(name, cartago.ArtifactId id);
        cartago.focus(id);
        cartago.operation(id, updateResource("application/json", "{}"));

        // Record info about the artifact
        
        +artifact(customerId, name, id);
    }

    // evaluate accommodation message

    rule +!evaluate_request(string sender, accommodation(string customerName, string location, string accomodationType, long from, long to, long price), boolean res) {
        //TODO: if request from sender not in preferred it, we should ignore
        res = true;
    }

    rule +!execute_request(string sender, accommodation(string customerName, string location, string accomodationType, long from, long to, long price), funct outcome, boolean result) {
        console.println("Received a proposal for accommodation");
        +accommodation(sender, customerName,location,accomodationType,from,to, price);
        outcome = null_outcome();
        result = true;
    }
   
   // evaluate flight message

    rule +!evaluate_request(string sender, flight(string customerName, string departure, string arrival, long date, long price), boolean res) {
        //TODO: if request from sender not in preferred it, we should ignore
        res = true;
    }

    rule +!execute_request(string sender, flight(string customerName, string departure, string arrival, long date, long price), funct outcome, boolean result) {
        console.println("Received a proposal for accommodation");
        +flight(sender, customerName, departure, arrival, date, price);
        outcome = null_outcome();
        result = true;
    }

    // collect proposal and publish to <planner>/plans/<customerid>

    rule +!evaluate_request(string sender, collect_proposals(string customerId), boolean res) {
        //TODO: if request from sender not in preferred it, we should ignore
        res = true;
    }

    rule +!execute_request(string sender, collect_proposals(string customerName), funct outcome, boolean result){
        console.println("Prepare proposal");

        // loop all facts having customerName,
        // smashing together into json body
        // put it on via REST
        // foreach(available_flight(string available_departure, string available_arrival, long date)) {
        //     if (available_departure == departure & available_arrival == arrival & date == from) {
        //         !request_action(plannerId, flight(available_departure, available_arrival, from));
        //     }
        // }

        long from;
        long to;
        string departure = "";
        string arrival = "";
        string accommodations = "";
        foreach(accommodation(string provider, string requestedCustomerName, string location, string accomodationType, long requestedFrom, long requestedTo, long price)) {
            if (customerName == requestedCustomerName) {
                from = requestedFrom;
                to = requestedTo;
                accommodations = accommodations + "{ \"provider\":" + "\"" + provider + "\", \"price\": "+price+",\"accomodationType\": \""+accomodationType+"\"}";
                -accommodation(sender, customerName,location,accomodationType,from,to, price);
            }
        }
        
        string flights = "";
        foreach(flight(string provider, string requestedCustomerName, string requestedDeparture, string requestedArrival, long date, long price)) {
             if (customerName == requestedCustomerName) {
                departure = requestedDeparture;
                arrival = requestedArrival;
                flights = flights + "{ \"provider\":" + "\"" + provider + "\", \"price\": "+price+"}";
                -flight(provider, requestedCustomerName, requestedDeparture, requestedArrival, date, price);
            }
        }
        string jsonPlan =  "{\n" +
                "\"from\": "+ from +", \n" +
                "\"to\": "+ to +", \n" +
                "\"departure\": \""+  departure +"\",\n" +
                "\"arrival\": \""+ arrival +"\",\n" +
                "\"proposedAccomodations\": ["+ accommodations + "],\n" +
                "\"proposedFlights\": ["+ flights + "],\n" +
                "\"name\": \""+customerName+"\"\n" +
                "}";
        
        MAMSAgent::!post("http://localhost:9000/" + system.name() +"/plans/", jsonPlan, int code, string content);
        if (code ~= 200) S.fail();

        outcome = null_outcome();
        result = true;
    }
}