package mams;

// each Planner will be registered via TravelBroker
// Planner presents a Travel Agency registering with the market place
agent PlannerAgent extends mams.PassiveMAMSAgent, astra.protocol.FipaRequest, mams.TravelAgent{
    module System system;
    module Console console;

    
    initial !init();

     // initialize channel to send message to, would be a topic per se
    initial !monitor_action_requests();

    rule +!init() {
        MAMSAgent::!init();
        MAMSAgent::!created("base");
        console.println("Setting up plans list resource under each planner");
        
        // create endpoint for requesting plan

        PassiveMAMSAgent::!listResource("plans", "mams.Plan");
    }

   // add the request plan, look for provider
    rule $cartago.signal(string source_artifact_name, listItemArtifactCreated(string plan_name, "mams.Plan")) {
        // handle Provider registration
        string name = source_artifact_name+"-"+plan_name;
        cartago.lookupArtifact(name, cartago.ArtifactId id);
        cartago.focus(id);

        // Record info about the artifact
        
        +artifact(plan_name, name, id);
    }

    rule +!evaluate_request(string sender, accommodation(string location, string accomodationType, long from, long to), boolean res) {
        res = true;
    }

    rule +!execute_request(string sender, accommodation(string location, string accomodationType, long from, long to), funct outcome, boolean result) {
        console.println("Received a proposal for accommodation");

        outcome = null_outcome();
        result = true;
    }
   

    rule +!evaluate_request(string sender, flight(string departure, string arrival, long date), boolean res) {
        res = true;
    }

    rule +!execute_request(string sender, flight(string departure, string arrival, long date), funct outcome, boolean result) {
        console.println("Received a proposal for accommodation");

        outcome = null_outcome();
        result = true;
    }
}